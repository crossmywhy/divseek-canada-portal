<?php

/**
 * @file
 * Test file for Tripal CV browser features.
 *
 * This test file tests the basics of the Tripal CV browser module
 * functionalities.
 *
 * @see DrupalWebTestCase
 * @see SimpleTestUnitTestExampleTestCase
 *
 * @ingroup simpletest_example
 */

module_load_include('php', 'tripal_simpletest', 'tripal_test_case');

/**
 * Main test class.
 */
class TripalCvbTestCase extends TripalTestCase {

  protected $regularUser;
  protected $globalCvbUser;
  protected $cvbAdmin;
  protected $cvs;
  protected $cvterms;
  protected $browsers;

  /**
   * Returns the test title and description.
   */
  public static function getInfo() {
    return array(
      'name' => 'Tripal CV browser Functional Tests',
      'description' => 'Ensure that the CV browser works properly.',
      'group' => 'Tripal CV Browser',
    );
  }

  /**
   * Set up the test environment.
   *
   * @see DrupalWebTestCase::setUp()
   */
  public function setUp() {

    parent::setUp(array('views', 'entity', 'cvterm_action', 'tripal_cv'));

    // We need to clear field info cache and static variables first otherwise
    // it will not recognize our new field.
    field_info_cache_clear();

    // Enable the CV browser module.
    module_enable(array('tripal_cvb'), TRUE);
    $this->resetAll();
    $this->verbose("Enabled module: tripal_cvb");

    // Insert default data.
    $this->initCvBrowserDataset();

    // Create user with appropriate roles.
    $this->regularUser    = $this->drupalCreateUser(
      array('access content')
    );
    $this->globalCvbUser = $this->drupalCreateUser(
      array('use tripal cv browser')
    );
    $this->cvbAdmin       = $this->drupalCreateUser(
      array(
        'administer tripal cv browser',
        'administer tripal_cvb entities',
        'administer blocks',
      )
    );
  }

  /**
   * Inserts a new CV and returns its cv_id.
   */
  protected function insertCv($cv_name, $cv_definition = '') {
    $insert_sql = "
    INSERT INTO {cv} (cv_id, name, definition)
    VALUES (DEFAULT, :cv_name, :cv_definition);";
    chado_query(
      $insert_sql,
      array(
        ':cv_name' => $cv_name,
        ':cv_definition' => $cv_definition,
      )
    );

    $sql = "SELECT cv_id FROM {cv} WHERE name = :cv_name;";
    $result = chado_query($sql, array(':cv_name' => $cv_name));
    $cv_id = $result->fetchField();

    return $cv_id;
  }

  /**
   * Inserts a new CV term and returns its cvterm_id.
   */
  protected function insertCvTerm($cvterm_name, $cv_id, $cvterm_definition = '') {
    $accession = 'cvterm:' . $cvterm_name;
    $sql = "
      INSERT INTO {dbxref} (dbxref_id, db_id, accession, version, description)
      VALUES (DEFAULT, 1,  :accession, DEFAULT, '');";
    chado_query($sql, array(':accession' => $accession));

    $sql = "SELECT dbxref_id FROM {dbxref} WHERE accession = :accession;";
    $result = chado_query($sql, array(':accession' => $accession));
    $dbxref_id = $result->fetchField();

    $sql = "
      INSERT INTO {cvterm} (cvterm_id, cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
      VALUES (DEFAULT, :cv_id, :cvterm_name, :cvterm_definition, :dbxref_id, DEFAULT, DEFAULT);";
    chado_query(
      $sql,
      array(
        ':cv_id' => $cv_id,
        ':cvterm_name' => $cvterm_name,
        ':cvterm_definition' => $cvterm_definition,
        ':dbxref_id' => $dbxref_id,
      )
    );

    $sql = "SELECT cvterm_id FROM {cvterm} WHERE name = :cvterm_name AND cv_id = :cv_id;";
    $result = chado_query(
      $sql,
      array(
        ':cv_id' => $cv_id,
        ':cvterm_name' => $cvterm_name,
      )
    );
    $cvterm_id = $result->fetchField();
    return $cvterm_id;
  }

  /**
   * Inserts a new CV term relationship.
   */
  protected function insertCvTermRelationship($child_cvterm_id, $parent_cvterm_id) {
    static $is_a_cvterm_id;

    if (!$is_a_cvterm_id) {
      $is_a_cvterm = tripal_get_cvterm(array('name' => 'is_a'));
      if ($is_a_cvterm) {
        $is_a_cvterm_id = $is_a_cvterm->cvterm_id;
      }
      else {
        $is_a_cvterm_id = $this->insertCvTerm('is_a', 1);
      }
    }

    $sql = "
      INSERT INTO {cvterm_relationship} (cvterm_relationship_id, type_id, subject_id, object_id)
      VALUES (DEFAULT, :is_a_cvterm_id, :child_id, :parent_id);";
    chado_query(
      $sql,
      array(
        ':is_a_cvterm_id' => $is_a_cvterm_id,
        ':child_id' => $child_cvterm_id,
        ':parent_id' => $parent_cvterm_id,
      )
    );
  }

  /**
   * Insert test dataset.
   *
   * @code
   *  cvbrowser_test_cv (CV)
   *    / | \
   *   a  b  c
   *  / \    |
   * d   e   f
   *     |
   *     g
   * @endcode
   */
  protected function initCvBrowserDataset() {
    $cv_id = $this->insertCv('cvbrowser_test_cv', 'CV Browser test CV');

    $a_cvterm_id = $this->insertCvTerm('alpha', $cv_id, 'Alpha letter');
    $b_cvterm_id = $this->insertCvTerm('beta', $cv_id, 'Beta letter');
    $c_cvterm_id = $this->insertCvTerm('gamma', $cv_id, 'Gamma letter');
    $d_cvterm_id = $this->insertCvTerm('delta', $cv_id, 'Delta letter');
    $e_cvterm_id = $this->insertCvTerm('epsilon', $cv_id, 'Epsilon letter');
    $f_cvterm_id = $this->insertCvTerm('zeta', $cv_id, 'Zeta letter');
    $g_cvterm_id = $this->insertCvTerm('eta', $cv_id, 'Eta letter');

    $this->insertCvTermRelationship($d_cvterm_id, $a_cvterm_id);
    $this->insertCvTermRelationship($e_cvterm_id, $a_cvterm_id);
    $this->insertCvTermRelationship($g_cvterm_id, $e_cvterm_id);
    $this->insertCvTermRelationship($f_cvterm_id, $c_cvterm_id);

    $this->cvs = array($cv_id);
    $this->cvterms = array(
      $a_cvterm_id,
      $b_cvterm_id,
      $c_cvterm_id,
      $d_cvterm_id,
      $e_cvterm_id,
      $f_cvterm_id,
      $g_cvterm_id,
    );

  }

  /**
   * Test global CV browser page.
   */
  protected function runTestCvBrowserPage() {
    $this->verbose("Testing CV browser global page.");

    $this->drupalLogin($this->regularUser);
    $this->drupalGet('tripal/cvbrowser/cv/cvbrowser_test_cv');
    $this->assertResponse(403, 'Public access is denied to the global CV browser page.');

    $this->drupalLogin($this->globalCvbUser);
    $this->drupalGet('tripal/cvbrowser/cv/fake123');
    $this->assertResponse(404, 'Page not found for inexisting CV.');

    $this->drupalGet('tripal/cvbrowser/cvterm/fake123');
    $this->assertResponse(404, 'Page not found for inexisting CV term.');

    $this->drupalGet('tripal/cvbrowser/cv/12345678');
    $this->assertResponse(404, 'Page not found for inexisting CV (cv_id).');

    $this->drupalGet('tripal/cvbrowser/cvterm/12345678');
    $this->assertResponse(404, 'Page not found for inexisting CV term (cvterm_id).');

    $this->drupalGet('tripal/cvbrowser/cv/cvbrowser_test_cv');
    $this->assertResponse(200, 'Access allowed to CV browser to users with "use tripal cv browser" permission.');

    $this->drupalGet('tripal/cvbrowser/cvterm/' . $this->cvterms[0]);
    $this->assertResponse(200, 'Access to CV browser using cvterm_id.');

    $this->drupalGet('tripal/cvbrowser/cvterm/alpha');
    $this->assertResponse(200, 'Access to CV browser using CV term name.');

    $this->drupalGet('tripal/cvbrowser/cv/' . $this->cvs[0]);
    $this->assertResponse(200, 'Access to CV browser using cv_id.');
    $this->assertRaw('tripal_cvb/theme/css/tripal_cvb.css', 'Tripal CV browser CSS loaded.', 'CSS');
    $this->assertRaw('tripal_cvb/theme/js/tripal_cvb.js', 'Tripal CV browser javascript loaded.', 'JS');
    $this->assertText('CV Browser', 'CV browser title displayed', 'CV browser');
    $this->assertRaw('<div class="tripal-cvb tripal-cvb-browser', 'Browser container.', 'CV browser');
    $this->assertRaw('<ul class="tripal-cvb">', 'Browser root.', 'CV browser');
    $this->assertRaw('<li class="tripal-cvb tripal-cvb-root', 'Browser node.', 'CV browser');

    $this->drupalGet('tripal/cvbrowser/cvterm/alpha+gamma');
    $this->assertResponse(200, 'Multiple CV term names browser.');

  }

  /**
   * Test settings.
   */
  protected function runTestCvBrowserSettings() {
    $this->verbose("Testing CV browser settings.");

    // Check module installation.
    $result = db_query("SELECT * FROM {menu_links} WHERE link_path = 'tripal_cvb';");
    $menu_link = $result->fetchObject();
    $this->assertTrue($menu_link, 'Menu item inserted correctly.');

    $this->drupalLogin($this->regularUser);
    $this->drupalGet('tripal_cvb');
    $this->assertResponse(403, 'Public access is denied to the list of available CV browser page.');

    $this->drupalGet('tripal_cvb/add');
    $this->assertResponse(403, 'Browser creation denied to public users.');

    $this->drupalLogin($this->globalCvbUser);
    $this->drupalGet('tripal_cvb');
    $this->assertResponse(200, 'Access allowed to the available CV browser page to users with "use tripal cv browser" permission.');

    $this->drupalGet('tripal_cvb/add');
    $this->assertResponse(403, 'Browser creation denied to users with "use tripal cv browser" permission.');

    $this->drupalLogin($this->cvbAdmin);
    $this->drupalGet('tripal_cvb/add');
    $this->assertResponse(200, 'Browser creation allowed to admins with "administer tripal_cvb entities" permission.');

    $edit = array();
    $edit['title'] = $this->randomName();
    $edit['machine_name'] = $this->randomName(16);
    $edit['description'] = 'Blah blah blah.';
    $edit['root_type'] = 'cv';
    $edit['root_ids'] = $this->cvs[0];
    // Other values:
    // $edit['cvterm_action[und][0][type]']        = 'view';
    // $edit['cvterm_action[und][0][action]']      = '';
    // $edit['cvterm_action[und][0][title]']       = '';
    // $edit['cvterm_action[und][0][target]']      = '';
    // $edit['cvterm_action[und][0][target_type]'] = 'term';
    // $edit['cvterm_action[und][0][target_id]']   = '';
    // $edit['cvterm_action[und][0][insert]']      = 'append';
    // $edit['cvterm_action[und][0][_weight]']     = '0';
    // to be used when implementing CV term action tests.
    // @todo Implement action tests.
    $this->drupalPost('tripal_cvb/add', $edit, 'Save');
    $this->assertText($edit['description']);

    $this->drupalGet('tripal_cvb/' . $edit['machine_name']);
    $this->assertText($edit['description']);

    $this->browsers = array($edit['machine_name']);
  }

  /**
   * Test CV browser block features.
   */
  protected function runTestCvBrowserCustomBrowser() {
    $this->drupalLogin($this->globalCvbUser);
    $this->drupalGet('tripal/cvbrowser/browser/' . $this->browsers[0]);
    $this->assertResponse(200, 'Access to custom browser allowed to users with permission "use tripal cv browser".');
  }

  /**
   * Test CV browser block features.
   */
  protected function runTestCvBrowserBlock() {
    $this->drupalLogin($this->cvbAdmin);
    $this->drupalGet('admin/structure/block');

    $block_id = 'tripal_cvb_tripal-cvb-blk-' . $this->browsers[0];
    $region = 'content';
    $edit = array();
    $edit['blocks[' . $block_id . '][region]'] = $region;
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));

    // Confirm that the block was moved to the proper region.
    $this->assertText(
      t('The block settings have been updated.'),
      format_string(
        'Block successfully moved to %region_name region.',
        array('%region_name' => $region)
      )
    );

    // Confirm that the custom block was found at the proper region.
    $this->drupalGet('');
    $block_id = 'block-' . strtolower(str_replace('_', '-', $block_id));
    if ('content' == $region) {
      $xpath = $this->buildXPathQuery(
        '//div[@id=:content_id]//div[@id=:block-id]',
        array(
          ':block-id' => $block_id,
          ':content_id' => 'content',
        )
      );
    }
    else {
      $xpath = $this->buildXPathQuery('//div[@class=:region-class]//div[@id=:block-id]', array(
        ':region-class' => 'region region-' . str_replace('_', '-', $region),
        ':block-id' => $block_id,
      ));
    }
    $this->assertFieldByXPath($xpath, NULL, format_string('Custom CV browser block found in %region_name region.', array('%region_name' => $region)));
  }

  /**
   * Runs all tests.
   *
   * Since we don't modify our initial dataset, we can runs all tests at once so
   * we will not have to instantiate and remove Chado several times (we save a
   *   lot of time!).
   */
  public function testTripalCvBrowser() {
    $this->runTestCvBrowserPage();
    $this->runTestCvBrowserSettings();
    $this->runTestCvBrowserCustomBrowser();
    $this->runTestCvBrowserBlock();
  }

}
